// function RenderDish({dish}) {
//   if (dish != null)
//     return (
//       <div className="container">
//       <div className="row">
//         <Card>
//           <CardImg
//             top
//             src={dish.image}
//             alt={dish.name}
//           />
//           <CardBody>
//             <CardTitle>{dish.name}</CardTitle>
//             <CardText>{dish.description}</CardText>
//           </CardBody>
//         </Card>

//       </div>
//       <div >
//       </div>

//     </div>
//     );
//   else return <div></div>;
// }

//   function RenderComments({comments}) {

//       return (
//         <div>
//           <h4>Comments</h4>
//           <div>
//           {comments.map((comm)=>
//           <ul className='list-unstyled' key={comm.id}>

//                 <li>{comm.comment}</li>
//                 <li>
//                   -- {comm.author},{new Intl.DateTimeFormat('en-US', { year: 'numeric', month: 'short', day: '2-digit'}).format(new Date(Date.parse(comm.date)))}
//                 </li>
//                 <br/>
//               </ul>
//             )}
//           </div>
//         </div>

//       )
//           }

//  const DishDetail = (props) => {
//   if ( props.dish !=null){
//     return (
//       <div className="container">
//       <div className="row">
//           <Breadcrumb>

//               <BreadcrumbItem><Link to="/menu">Menu</Link></BreadcrumbItem>
//               <BreadcrumbItem active>{props.dish.name}</BreadcrumbItem>
//           </Breadcrumb>
//           <div className="col-12">
//               <h3>{props.dish.name}</h3>
//               <hr />
//           </div>
//       </div>
//       <div className="row">
//           <div className="col-12 col-md-5 m-1">
//               <RenderDish dish={props.dish} />
//           </div>
//           <div className="col-12 col-md-5 m-1">
//               <RenderComments comments={props.comments} />
//           </div>
//       </div>
//       </div>
//     );
//    }
//       else return <div></div>;
//   }

//export default DishDetail;


class DishDetail extends Component {
  constructor(props) {
    super(props);
    this.state = {
      isModalOpen: false,
    };

    this.toggleModal = this.toggleModal.bind(this);
    this.handleComments = this.handleComments.bind(this);
  }

  toggleModal() {
    this.setState({
      isModalOpen: !this.state.isModalOpen,
    });
  }

  handleComments(values) {
    this.toggleModal();
    this.props.postComment(this.props.dishId, values.rating, values.author, values.comment);
    //event.preventDefault();
  }

  render() {
    const RenderDish = ({ dish }) => {
      if (dish != null)
        return (
          <div className="container">
            <div className="row">
            <FadeTransform
            in
            transformProps={{
                exitTransform: 'scale(0.5) translateY(-50%)'
            }}>
        <Card>
            <CardImg top src={baseUrl + dish.image} alt={dish.name} />
            <CardBody>
                <CardTitle>{dish.name}</CardTitle>
                <CardText>{dish.description}</CardText>
            </CardBody>
        </Card>
        </FadeTransform>
            </div>
            <div></div>
          </div>
        );
      else return <div></div>;
    };

    const RenderComments = ({ comments, postComment, dishId }) => {
      return (
        <div>
          <h4>Comments</h4>
          <div>
          <Stagger in>
          {comments.map((comment) => {
              return (
                  <Fade in>
                  <li key={comment.id}>
                  <p>{comment.comment}</p>
                  <p>-- {comment.author} , {new Intl.DateTimeFormat('en-US', { year: 'numeric', month: 'short', day: '2-digit'}).format(new Date(Date.parse(comment.date)))}</p>
                  </li>
                  </Fade>
              );
          })}
          </Stagger>
          </div>
          <CommentForm dishId={dishId} postComment={postComment} />
        </div>
      );
    };

    const CommentForm = () => {
      return (
        <div>
          <Button outline onClick={this.toggleModal}>
            <span className="fa fa-pencil fa-lg"></span> Submit Comment
          </Button>
          <Modal isOpen={this.state.isModalOpen} toggle={this.toggleModal}>
            <ModalHeader toggle={this.toggleModal}>Submit Comments</ModalHeader>
            <ModalBody>
              <LocalForm onSubmit={(values) => this.handleComments(values)}>
                <Col className="form-group">
                  <Label htmlFor="rating">Rating</Label>
                  <Control.select
                    model=".rating"
                    name="rating"
                    className="form-control"
                  >
                    <option>1</option>
                    <option>2</option>
                    <option>3</option>
                    <option>4</option>
                    <option>5</option>
                  </Control.select>
                </Col>
                <Col className="form-group">
                  <Label htmlFor="name">Your Name</Label>
                  <Control.text
                    model=".name"
                    id="name"
                    name="name"
                    placeholder="Name"
                    className="form-control"
                    validators={{
                      required,
                      minLength: minLength(3),
                      maxLength: maxLength(15),
                    }}
                  />
                  <Errors
                    className="text-danger"
                    model=".name"
                    show="touched"
                    messages={{
                      required: "Required",
                      minLength: "Must be greater than 2 characters",
                      maxLength: "Must be 15 characters or less",
                    }}
                  />
                </Col>

                <Col>
                  <Label htmlFor="comment">Comment</Label>

                  <Control.textarea
                    model=".comment"
                    id="comment"
                    name="comment"
                    rows="6"
                    className="form-control"
                  />
                </Col>

                <Col mt={2} className="form-group">
                  <Button type="submit" color="primary">
                    Submit
                  </Button>
                </Col>
              </LocalForm>
            </ModalBody>
          </Modal>
        </div>
      );
    };
    if (this.props.isLoading) {
      return(
          <div className="container">
              <div className="row">            
                  <Loading />
              </div>
          </div>
      );
  }
  else if (this.props.errMess) {
      return(
          <div className="container">
              <div className="row">            
                  <h4>{this.props.errMess}</h4>
              </div>
          </div>
      );
  }
  else if (this.props.dish != null) 

    return (
      
      <div className="container">
        <div className="row">
          <Breadcrumb>
            <BreadcrumbItem>
              <Link to="/menu">Menu</Link>
            </BreadcrumbItem>
            <BreadcrumbItem active>{this.props.dish.name}</BreadcrumbItem>
          </Breadcrumb>
          <div className="col-12">
            <h3>{this.props.dish.name}</h3>
            <hr />
          </div>
        </div>
        <div className="row">
          <div className="col-12 col-md-5 m-1">
            <RenderDish dish={this.props.dish} />
          </div>
          <div className="col-12 col-md-5 m-1">
            <RenderComments comments={this.props.comments}  postComment={this.props.postComment}
            dishId={this.props.dish.id} />
          </div>
        </div>
      </div>
    );
  }
}

export default DishDetail;

